// Generated by CoffeeScript 1.4.0
(function() {
  var app, browser, browserEnabled, browsersEnabledByDefault, bundle, crypto, enabledBrowsers, fs, knownBrowsers, path, reqToBrowser, useragent, useragentFamilyToBrowser, _i, _len,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  app = __meteor_bootstrap__.app;

  bundle = __meteor_bootstrap__.bundle;

  crypto = __meteor_bootstrap__.require('crypto');

  fs = __meteor_bootstrap__.require('fs');

  path = __meteor_bootstrap__.require('path');

  useragent = __meteor_bootstrap__.require('useragent');

  knownBrowsers = ['android', 'chrome', 'firefox', 'IE', 'mobileSafari', 'opera', 'safari'];

  browsersEnabledByDefault = ['android', 'IE', 'mobileSafari', 'opera', 'safari'];

  enabledBrowsers = {};

  for (_i = 0, _len = browsersEnabledByDefault.length; _i < _len; _i++) {
    browser = browsersEnabledByDefault[_i];
    enabledBrowsers[browser] = true;
  }

  useragentFamilyToBrowser = {
    'Android': 'android',
    'Chrome': 'chrome',
    'Firefox': 'firefox',
    'IE': 'IE',
    'Mobile Safari': 'mobileSafari',
    'Opera': 'opera',
    'Safari': 'safari'
  };

  Meteor.AppCache = {
    config: function(options) {
      var option, value, _j, _len1;
      for (option in options) {
        value = options[option];
        if (option === 'browsers') {
          enabledBrowsers = {};
          for (_j = 0, _len1 = value.length; _j < _len1; _j++) {
            browser = value[_j];
            enabledBrowsers[browser] = true;
          }
        } else if (__indexOf.call(knownBrowsers, option) >= 0) {
          enabledBrowsers[option] = value;
        } else {
          throw new Error('Unknown AppCache config option: ' + option);
        }
      }
      return void 0;
    }
  };

  reqToBrowser = function(req) {
    return useragentFamilyToBrowser[useragent.lookup(req.headers['user-agent']).family];
  };

  browserEnabled = function(req) {
    return enabledBrowsers[reqToBrowser(req)];
  };

  Meteor._app_cache_manifest_hook = function(req) {
    if (browserEnabled(req)) {
      return 'manifest="/app.manifest"';
    } else {
      return '';
    }
  };

  app.use(function(req, res, next) {
    var body, digest, hash, manifest, resource, _j, _k, _len1, _len2, _ref, _ref1;
    if (req.url !== '/app.manifest') {
      return next();
    }
    if (!browserEnabled(req)) {
      res.writeHead(404);
      res.end();
      return;
    }
    hash = crypto.createHash('sha1');
    hash.update(JSON.stringify(__meteor_runtime_config__), 'utf8');
    hash.update(fs.readFileSync(path.join(bundle.root, 'app.html')));
    _ref = bundle.manifest;
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      resource = _ref[_j];
      if (resource.where === 'client') {
        hash.update(resource.hash);
      }
    }
    digest = hash.digest('hex');
    manifest = "CACHE MANIFEST\n\n";
    manifest += '# ' + digest + "\n\n";
    manifest += "CACHE:" + "\n";
    manifest += "/" + "\n";
    _ref1 = bundle.manifest;
    for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
      resource = _ref1[_k];
      if (resource.where === 'client') {
        manifest += resource.url + "\n";
      }
    }
    manifest += "\n";
    manifest += "NETWORK:\n";
    manifest += "/sockjs" + "\n";
    body = new Buffer(manifest);
    res.setHeader('Content-Type', 'text/cache-manifest');
    res.setHeader('Content-Length', body.length);
    return res.end(body);
  });

}).call(this);
