// Generated by CoffeeScript 1.4.0
(function() {
  var app, bundler, crypto, fs, hashdir, path, walk;

  app = __meteor_bootstrap__.app;

  bundler = __meteor_bootstrap__.bundler;

  crypto = __meteor_bootstrap__.require('crypto');

  fs = __meteor_bootstrap__.require('fs');

  path = __meteor_bootstrap__.require('path');

  walk = function(basedir, callback, dir) {
    var dirpath, filename, relative_filepath, _i, _len, _ref, _results;
    if (dir == null) {
      dir = null;
    }
    dirpath = dir != null ? path.join(basedir, dir) : basedir;
    if (!fs.existsSync(dirpath)) {
      return;
    }
    _ref = fs.readdirSync(dirpath);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      filename = _ref[_i];
      relative_filepath = dir != null ? path.join(dir, filename) : filename;
      if (fs.statSync(path.join(dirpath, filename)).isDirectory()) {
        _results.push(walk(basedir, callback, relative_filepath));
      } else {
        _results.push(callback(relative_filepath));
      }
    }
    return _results;
  };

  hashdir = function(hash, dir) {
    var filename, filenames, filepath, _i, _len;
    if (!fs.existsSync(dir)) {
      return;
    }
    filenames = fs.readdirSync(dir);
    for (_i = 0, _len = filenames.length; _i < _len; _i++) {
      filename = filenames[_i];
      filepath = path.join(dir, filename);
      if (fs.statSync(filepath).isDirectory()) {
        hashdir(hash, filepath);
      } else {
        hash.update(fs.readFileSync(filepath));
      }
    }
    return void 0;
  };

  app.use(function(req, res, next) {
    var body, bundle_dir, hash, manifest, url, _i, _len, _ref;
    if (req.url !== '/app.manifest') {
      return next();
    }
    bundle_dir = bundler.bundle_dir;
    hash = crypto.createHash('sha1');
    hash.update(JSON.stringify(__meteor_runtime_config__), 'utf8');
    hash.update(fs.readFileSync(path.join(bundle_dir, 'app.html')));
    hashdir(hash, path.join(bundle_dir, 'static'));
    hashdir(hash, path.join(bundle_dir, 'static_cacheable'));
    manifest = "CACHE MANIFEST\n\n";
    manifest += '# ' + hash.digest('hex') + "\n\n";
    manifest += "CACHE:" + "\n";
    manifest += "/" + "\n";
    _ref = bundler.app_info.urls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      url = _ref[_i];
      manifest += url + "\n";
    }
    manifest += "\n";
    manifest += "NETWORK:\n";
    manifest += "/sockjs" + "\n";
    body = new Buffer(manifest);
    res.setHeader('Content-Type', 'text/cache-manifest');
    res.setHeader('Content-Length', body.length);
    return res.end(body);
  });

}).call(this);
